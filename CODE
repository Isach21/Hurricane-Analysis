# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
def record_damages(damages):
    updated_damages = []
    for damage in damages:
        if damage[-1] == "M":
            updated_damages.append(float(damage.replace("M",""))* 1000000)
        elif damage[-1] == "B":
            updated_damages.append(float(damage.replace("B",""))* 1000000000)
        else:
            updated_damages.append(damage)
    return updated_damages

updated_damages = record_damages(damages)
print(updated_damages)

# 2 
# Create and view the hurricanes dictionary
def create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths):
    hurricanes = {}
    num_hurricanes = len(names)
    for i in range(num_hurricanes):
        hurricanes[names[i]] = {"Name": names[i],
                              "Month": months[i],
                              "Year": years[i],
                              "Max Sustained Wind": max_sustained_winds[i],
                              "Areas Affected": areas_affected[i],
                              "Damage": updated_damages[i],
                              "Deaths": deaths[i]}
    return hurricanes
    
hurricanes = create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
#print(hurricanes)
print(hurricanes["Wilma"])

# 3
# Organizing by Year
# create a new dictionary of hurricanes with year and key
def year_dictionaty(hurricanes):
  year_hurricanes = dict()
  for hurricane in hurricanes: 
    year = hurricanes[hurricane]["Year"]
    info = hurricanes[hurricane]
    if year not in year_hurricanes:
        year_hurricanes[year] = [info]
    else:
        year_hurricanes[year].append(info)
  return year_hurricanes

hurricanes_by_year = year_dictionaty(hurricanes)
#print(hurricanes_by_year[1933])

# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def areas_affected_count (hurricanes):
    areas_affected  = {}
    for hurricane in hurricanes:
        for area in hurricanes[hurricane]["Areas Affected"]:
            if area not in areas_affected:
                areas_affected[area] = 1
            else:
                areas_affected[area] +=1
    return areas_affected

areas_affected = areas_affected_count (hurricanes)
#print(areas_affected)

# 5 
# Calculating Maximum Hurricane Count
# find most frequently affected area and the number of hurricanes involved in

def fun_affected_area (areas_affected):
  hits = 0
  most_affected_area = []
  for area in areas_affected:
    hit = areas_affected[area]
    if hit > hits:
      hits = hit
      most_affected_area = area
  return most_affected_area, hits

most_affected_area = fun_affected_area(areas_affected)
print(most_affected_area)

# 6
# Calculating the Deadliest Hurricane
# find highest mortality hurricane and the number of deaths

def fun_highest_death (hurricanes):
  deaths = 0
  highest_deaths_hurricane = []
  for hurricane in hurricanes:
    n_deaths = hurricanes[hurricane]["Deaths"]
    if n_deaths > deaths:
      deaths = n_deaths
      highest_deaths_hurricane = hurricane
  return highest_deaths_hurricane, deaths

highest_deaths_hurricane = fun_highest_death(hurricanes)
print(highest_deaths_hurricane)


# 7
# Rating Hurricanes by Mortality
# categorize hurricanes in new dictionary with mortality severity as key

def rates_hurricanes_mortality (hurricanes):
  hurricanes_mortality = {0: [], 1:[], 2:[], 3 : [], 4 : [], 5 : [] }
  for hurricane in hurricanes:
    deaths = hurricanes[hurricane]["Deaths"]
    info =hurricanes[hurricane]
    if deaths == 0:
      hurricanes_mortality[0].append(info) 
    elif 0 < deaths <= 100:
      hurricanes_mortality[1].append(info) 
    elif 100 < deaths <= 500:
      hurricanes_mortality[2].append(info)
    elif 500 < deaths <= 1000:
      hurricanes_mortality[3].append(info)
    elif 1000 < deaths <= 10000:
      hurricanes_mortality[4].append(info)
    elif 10000 < deaths:
      hurricanes_mortality[5].append(info)    
  return hurricanes_mortality    

hurricanes_mortality = rates_hurricanes_mortality(hurricanes)
#print(hurricanes_mortality[1])

# 8 Calculating Hurricane Maximum Damage

def greatest_damage_hurricane (hurricanes):
  cost = 0
  hurricane_most_damage = []
  for hurricane in hurricanes:
    damage = hurricanes[hurricane]["Damage"]
    if damage == "Damages not recorded":
            pass
    elif damage > cost:
      cost = damage
      hurricane_most_damage = hurricane
  return hurricane_most_damage, cost

hurricane_most_damage = greatest_damage_hurricane(hurricanes)
print(hurricane_most_damage)

# 9
# Rating Hurricanes by Damage
def rates_hurricanes_damages (hurricanes):
  hurricanes_damages = {0: [], 1:[], 2:[], 3 : [], 4 : [], 5 : [] }
  for hurricane in hurricanes:
    damages = hurricanes[hurricane]["Damage"]
    info =hurricanes[hurricane]
    if damages == "Damages not recorded":
      hurricanes_damages[0].append(info) 
    elif 0 < damages <= 100000000:
      hurricanes_damages[1].append(info) 
    elif 100000000 < damages <= 1000000000:
      hurricanes_damages[2].append(info)
    elif 1000000000 < damages <= 10000000000:
      hurricanes_damages[3].append(info)
    elif 10000000000 < damages <= 50000000000:
      hurricanes_damages[4].append(info)
    elif 50000000000 < damages:
      hurricanes_damages[5].append(info)    
  return hurricanes_damages    

hurricanes_damages = rates_hurricanes_damages(hurricanes)
print(hurricanes_damages[5])
  
# categorize hurricanes in new dictionary with damage severity as key
